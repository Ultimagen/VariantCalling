name: ppmseq
run-name: "Build PPMSeq Docker Image"

on:
  push:
    branches:
      - main
      - master
      - release_*
    paths:
      - setup/ppmseq/pyproject.toml
  workflow_dispatch:

permissions:
  id-token: write # Required for assuming an AWS role
  contents: read # Required for actions/checkout

env:
  AWS_REGION: us-east-1
  AWS_ROLE: arn:aws:iam::337532070941:role/google-aws-sync-aws-role
  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/55428976747/locations/global/workloadIdentityPools/devops-pool/providers/devops-pool-provider
  GCP_SERVICE_ACCOUNT: gcr-push-sa@ultima-data-307918.iam.gserviceaccount.com

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 7
  
      # setup python and update the version in pyproject.toml
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install poetry
        run: |
            curl -sSL https://install.python-poetry.org | python3 -

      - name: Update Version
        run: |
            ppmseq_version=$($HOME/.local/bin/poetry version --short)
            echo "DOCKER_TAG=${ppmseq_version}" >> ${GITHUB_ENV}
        working-directory : setup/ppmseq

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Login to GAR
        id: gar-login
        uses: docker/login-action@v2
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract build parameters
        run: |
          echo "BUILD_TIMESTAMP=$(date '+%F_%H:%M:%S')" >> ${GITHUB_ENV}
          echo "BUILD_VERSION=$(git rev-parse --short HEAD)" >> ${GITHUB_ENV}

      - name: Build and push ppmseq docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.ppmseq
          push: true
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/ppmseq:${{ env.DOCKER_TAG }}         
            ${{ steps.ecr-login.outputs.registry }}/ppmseq:${{ steps.short-sha.outputs.sha }}        
            us-central1-docker.pkg.dev/ultima-data-307918/ultimagen/ppmseq:${{ env.DOCKER_TAG }}
            us-central1-docker.pkg.dev/ultima-data-307918/ultimagen/ppmseq:${{ steps.short-sha.outputs.sha }}
          build-args: |
            VERSION=${{ env.DOCKER_TAG }}
            BUILD_TIMESTAMP=${{ env.BUILD_TIMESTAMP }}
            BUILD_VERSION=${{ env.BUILD_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  