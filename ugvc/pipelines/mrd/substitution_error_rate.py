#!/env/python
# Copyright 2022 Ultima Genomics Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# DESCRIPTION
#    Calculate error rate per motif
# CHANGELOG in reverse chronological order
from __future__ import annotations

import argparse

from ugvc.dna.format import DEFAULT_FLOW_ORDER
from ugvc.mrd.substitution_error_rate_utils import calculate_substitution_error_rate


def parse_args(argv: list[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog="substitution_error_rate.py", description=run.__doc__)
    parser.add_argument(
        "-f",
        "--featuremap_single_substitutions_dataframe",
        type=str,
        required=True,
        help="""featuremap single substitutions dataframe parquet file""",
    )
    parser.add_argument(
        "--coverage_stats",
        type=str,
        required=True,
        help="""Coverage stats h5 file generated by the coverage_analysis code""",
    )
    parser.add_argument(
        "--depth_data",
        type=str,
        nargs="+",
        required=True,
        help="""Coverage depth bed (gzipped or not) files generated by the coverage_analysis code""",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=str,
        required=True,
        help="""Path to which output dataframe will be written (multiple files)""",
    )
    parser.add_argument(
        "--basename",
        type=str,
        default="",
        required=False,
        help="""basename of output files""",
    )
    parser.add_argument(
        "-r",
        "--reference_fasta",
        type=str,
        help="""reference fasta, only required for motif annotation most likely
         gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta but it must be localized""",
    )
    parser.add_argument(
        "--flow_order",
        type=str,
        required=False,
        default=DEFAULT_FLOW_ORDER,
        help="""flow order - required for cycle skip annotation """,
    )
    parser.add_argument(
        "--chrom",
        type=str,
        required=False,
        default=None,
        help="""single chromosome the featuremap was calculated for (leave blank if all chromosomes were included)""",
    )
    return parser.parse_args(argv[1:])


def run(argv: list[str]):
    """Calculate SNP error rate per motif"""
    args = parse_args(argv)
    calculate_substitution_error_rate(
        single_substitution_featuremap=args.featuremap_single_substitutions_dataframe,
        coverage_stats=args.coverage_stats,
        depth_data=args.depth_data,
        out_path=args.output,
        out_basename=args.basename,
        reference_fasta=args.reference_fasta,
        flow_order=args.flow_order,
        featuremap_chrom=args.chrom,
    )
